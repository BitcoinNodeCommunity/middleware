/* eslint-disable */
import Long from "long";
// Manually patched with the extension
import _m0 from 'protobufjs/minimal.js';
// Manually patched with the extension
import {ChanBackupSnapshot} from './lightning.js';

export const protobufPackage = "lnrpc";

export interface GenSeedRequest {
  /**
   * aezeed_passphrase is an optional user provided passphrase that will be used
   * to encrypt the generated aezeed cipher seed. When using REST, this field
   * must be encoded as base64.
   */
  aezeedPassphrase: Uint8Array;
  /**
   * seed_entropy is an optional 16-bytes generated via CSPRNG. If not
   * specified, then a fresh set of randomness will be used to create the seed.
   * When using REST, this field must be encoded as base64.
   */
  seedEntropy: Uint8Array;
}

export interface GenSeedResponse {
  /**
   * cipher_seed_mnemonic is a 24-word mnemonic that encodes a prior aezeed
   * cipher seed obtained by the user. This field is optional, as if not
   * provided, then the daemon will generate a new cipher seed for the user.
   * Otherwise, then the daemon will attempt to recover the wallet state linked
   * to this cipher seed.
   */
  cipherSeedMnemonic: string[];
  /**
   * enciphered_seed are the raw aezeed cipher seed bytes. This is the raw
   * cipher text before run through our mnemonic encoding scheme.
   */
  encipheredSeed: Uint8Array;
}

export interface InitWalletRequest {
  /**
   * wallet_password is the passphrase that should be used to encrypt the
   * wallet. This MUST be at least 8 chars in length. After creation, this
   * password is required to unlock the daemon. When using REST, this field
   * must be encoded as base64.
   */
  walletPassword: Uint8Array;
  /**
   * cipher_seed_mnemonic is a 24-word mnemonic that encodes a prior aezeed
   * cipher seed obtained by the user. This may have been generated by the
   * GenSeed method, or be an existing seed.
   */
  cipherSeedMnemonic: string[];
  /**
   * aezeed_passphrase is an optional user provided passphrase that will be used
   * to encrypt the generated aezeed cipher seed. When using REST, this field
   * must be encoded as base64.
   */
  aezeedPassphrase: Uint8Array;
  /**
   * recovery_window is an optional argument specifying the address lookahead
   * when restoring a wallet seed. The recovery window applies to each
   * individual branch of the BIP44 derivation paths. Supplying a recovery
   * window of zero indicates that no addresses should be recovered, such after
   * the first initialization of the wallet.
   */
  recoveryWindow: number;
  /**
   * channel_backups is an optional argument that allows clients to recover the
   * settled funds within a set of channels. This should be populated if the
   * user was unable to close out all channels and sweep funds before partial or
   * total data loss occurred. If specified, then after on-chain recovery of
   * funds, lnd begin to carry out the data loss recovery protocol in order to
   * recover the funds in each channel from a remote force closed transaction.
   */
  channelBackups:
    | ChanBackupSnapshot
    | undefined;
  /**
   * stateless_init is an optional argument instructing the daemon NOT to create
   * any *.macaroon files in its filesystem. If this parameter is set, then the
   * admin macaroon returned in the response MUST be stored by the caller of the
   * RPC as otherwise all access to the daemon will be lost!
   */
  statelessInit: boolean;
  /**
   * extended_master_key is an alternative to specifying cipher_seed_mnemonic and
   * aezeed_passphrase. Instead of deriving the master root key from the entropy
   * of an aezeed cipher seed, the given extended master root key is used
   * directly as the wallet's master key. This allows users to import/use a
   * master key from another wallet. When doing so, lnd still uses its default
   * SegWit only (BIP49/84) derivation paths and funds from custom/non-default
   * derivation paths will not automatically appear in the on-chain wallet. Using
   * an 'xprv' instead of an aezeed also has the disadvantage that the wallet's
   * birthday is not known as that is an information that's only encoded in the
   * aezeed, not the xprv. Therefore a birthday needs to be specified in
   * extended_master_key_birthday_timestamp or a "safe" default value will be
   * used.
   */
  extendedMasterKey: string;
  /**
   * extended_master_key_birthday_timestamp is the optional unix timestamp in
   * seconds to use as the wallet's birthday when using an extended master key
   * to restore the wallet. lnd will only start scanning for funds in blocks that
   * are after the birthday which can speed up the process significantly. If the
   * birthday is not known, this should be left at its default value of 0 in
   * which case lnd will start scanning from the first SegWit block (481824 on
   * mainnet).
   */
  extendedMasterKeyBirthdayTimestamp: string;
  /**
   * watch_only is the third option of initializing a wallet: by importing
   * account xpubs only and therefore creating a watch-only wallet that does not
   * contain any private keys. That means the wallet won't be able to sign for
   * any of the keys and _needs_ to be run with a remote signer that has the
   * corresponding private keys and can serve signing RPC requests.
   */
  watchOnly: WatchOnly | undefined;
}

export interface InitWalletResponse {
  /**
   * The binary serialized admin macaroon that can be used to access the daemon
   * after creating the wallet. If the stateless_init parameter was set to true,
   * this is the ONLY copy of the macaroon and MUST be stored safely by the
   * caller. Otherwise a copy of this macaroon is also persisted on disk by the
   * daemon, together with other macaroon files.
   */
  adminMacaroon: Uint8Array;
}

export interface WatchOnly {
  /**
   * The unix timestamp in seconds of when the master key was created. lnd will
   * only start scanning for funds in blocks that are after the birthday which
   * can speed up the process significantly. If the birthday is not known, this
   * should be left at its default value of 0 in which case lnd will start
   * scanning from the first SegWit block (481824 on mainnet).
   */
  masterKeyBirthdayTimestamp: string;
  /**
   * The fingerprint of the root key (also known as the key with derivation path
   * m/) from which the account public keys were derived from. This may be
   * required by some hardware wallets for proper identification and signing. The
   * bytes must be in big-endian order.
   */
  masterKeyFingerprint: Uint8Array;
  /**
   * The list of accounts to import. There _must_ be an account for all of lnd's
   * main key scopes: BIP49/BIP84 (m/49'/0'/0', m/84'/0'/0', note that the
   * coin type is always 0, even for testnet/regtest) and lnd's internal key
   * scope (m/1017'/<coin_type>'/<account>'), where account is the key family as
   * defined in `keychain/derivation.go` (currently indices 0 to 9).
   */
  accounts: WatchOnlyAccount[];
}

export interface WatchOnlyAccount {
  /**
   * Purpose is the first number in the derivation path, must be either 49, 84
   * or 1017.
   */
  purpose: number;
  /**
   * Coin type is the second number in the derivation path, this is _always_ 0
   * for purposes 49 and 84. It only needs to be set to 1 for purpose 1017 on
   * testnet or regtest.
   */
  coinType: number;
  /**
   * Account is the third number in the derivation path. For purposes 49 and 84
   * at least the default account (index 0) needs to be created but optional
   * additional accounts are allowed. For purpose 1017 there needs to be exactly
   * one account for each of the key families defined in `keychain/derivation.go`
   * (currently indices 0 to 9)
   */
  account: number;
  /** The extended public key at depth 3 for the given account. */
  xpub: string;
}

export interface UnlockWalletRequest {
  /**
   * wallet_password should be the current valid passphrase for the daemon. This
   * will be required to decrypt on-disk material that the daemon requires to
   * function properly. When using REST, this field must be encoded as base64.
   */
  walletPassword: Uint8Array;
  /**
   * recovery_window is an optional argument specifying the address lookahead
   * when restoring a wallet seed. The recovery window applies to each
   * individual branch of the BIP44 derivation paths. Supplying a recovery
   * window of zero indicates that no addresses should be recovered, such after
   * the first initialization of the wallet.
   */
  recoveryWindow: number;
  /**
   * channel_backups is an optional argument that allows clients to recover the
   * settled funds within a set of channels. This should be populated if the
   * user was unable to close out all channels and sweep funds before partial or
   * total data loss occurred. If specified, then after on-chain recovery of
   * funds, lnd begin to carry out the data loss recovery protocol in order to
   * recover the funds in each channel from a remote force closed transaction.
   */
  channelBackups:
    | ChanBackupSnapshot
    | undefined;
  /**
   * stateless_init is an optional argument instructing the daemon NOT to create
   * any *.macaroon files in its file system.
   */
  statelessInit: boolean;
}

export interface UnlockWalletResponse {
}

export interface ChangePasswordRequest {
  /**
   * current_password should be the current valid passphrase used to unlock the
   * daemon. When using REST, this field must be encoded as base64.
   */
  currentPassword: Uint8Array;
  /**
   * new_password should be the new passphrase that will be needed to unlock the
   * daemon. When using REST, this field must be encoded as base64.
   */
  newPassword: Uint8Array;
  /**
   * stateless_init is an optional argument instructing the daemon NOT to create
   * any *.macaroon files in its filesystem. If this parameter is set, then the
   * admin macaroon returned in the response MUST be stored by the caller of the
   * RPC as otherwise all access to the daemon will be lost!
   */
  statelessInit: boolean;
  /**
   * new_macaroon_root_key is an optional argument instructing the daemon to
   * rotate the macaroon root key when set to true. This will invalidate all
   * previously generated macaroons.
   */
  newMacaroonRootKey: boolean;
}

export interface ChangePasswordResponse {
  /**
   * The binary serialized admin macaroon that can be used to access the daemon
   * after rotating the macaroon root key. If both the stateless_init and
   * new_macaroon_root_key parameter were set to true, this is the ONLY copy of
   * the macaroon that was created from the new root key and MUST be stored
   * safely by the caller. Otherwise a copy of this macaroon is also persisted on
   * disk by the daemon, together with other macaroon files.
   */
  adminMacaroon: Uint8Array;
}

function createBaseGenSeedRequest(): GenSeedRequest {
  return { aezeedPassphrase: new Uint8Array(), seedEntropy: new Uint8Array() };
}

export const GenSeedRequest = {
  encode(message: GenSeedRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.aezeedPassphrase.length !== 0) {
      writer.uint32(10).bytes(message.aezeedPassphrase);
    }
    if (message.seedEntropy.length !== 0) {
      writer.uint32(18).bytes(message.seedEntropy);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GenSeedRequest {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenSeedRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.aezeedPassphrase = reader.bytes();
          break;
        case 2:
          message.seedEntropy = reader.bytes();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): GenSeedRequest {
    return {
      aezeedPassphrase: isSet(object.aezeedPassphrase) ? bytesFromBase64(object.aezeedPassphrase) : new Uint8Array(),
      seedEntropy: isSet(object.seedEntropy) ? bytesFromBase64(object.seedEntropy) : new Uint8Array(),
    };
  },

  toJSON(message: GenSeedRequest): unknown {
    const obj: any = {};
    message.aezeedPassphrase !== undefined &&
      (obj.aezeedPassphrase = base64FromBytes(
        message.aezeedPassphrase !== undefined ? message.aezeedPassphrase : new Uint8Array(),
      ));
    message.seedEntropy !== undefined &&
      (obj.seedEntropy = base64FromBytes(message.seedEntropy !== undefined ? message.seedEntropy : new Uint8Array()));
    return obj;
  },

  fromPartial(object: DeepPartial<GenSeedRequest>): GenSeedRequest {
    const message = createBaseGenSeedRequest();
    message.aezeedPassphrase = object.aezeedPassphrase ?? new Uint8Array();
    message.seedEntropy = object.seedEntropy ?? new Uint8Array();
    return message;
  },
};

function createBaseGenSeedResponse(): GenSeedResponse {
  return { cipherSeedMnemonic: [], encipheredSeed: new Uint8Array() };
}

export const GenSeedResponse = {
  encode(message: GenSeedResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.cipherSeedMnemonic) {
      writer.uint32(10).string(v!);
    }
    if (message.encipheredSeed.length !== 0) {
      writer.uint32(18).bytes(message.encipheredSeed);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GenSeedResponse {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenSeedResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.cipherSeedMnemonic.push(reader.string());
          break;
        case 2:
          message.encipheredSeed = reader.bytes();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): GenSeedResponse {
    return {
      cipherSeedMnemonic: Array.isArray(object?.cipherSeedMnemonic)
        ? object.cipherSeedMnemonic.map((e: any) => String(e))
        : [],
      encipheredSeed: isSet(object.encipheredSeed) ? bytesFromBase64(object.encipheredSeed) : new Uint8Array(),
    };
  },

  toJSON(message: GenSeedResponse): unknown {
    const obj: any = {};
    if (message.cipherSeedMnemonic) {
      obj.cipherSeedMnemonic = message.cipherSeedMnemonic.map((e) => e);
    } else {
      obj.cipherSeedMnemonic = [];
    }
    message.encipheredSeed !== undefined &&
      (obj.encipheredSeed = base64FromBytes(
        message.encipheredSeed !== undefined ? message.encipheredSeed : new Uint8Array(),
      ));
    return obj;
  },

  fromPartial(object: DeepPartial<GenSeedResponse>): GenSeedResponse {
    const message = createBaseGenSeedResponse();
    message.cipherSeedMnemonic = object.cipherSeedMnemonic?.map((e) => e) || [];
    message.encipheredSeed = object.encipheredSeed ?? new Uint8Array();
    return message;
  },
};

function createBaseInitWalletRequest(): InitWalletRequest {
  return {
    walletPassword: new Uint8Array(),
    cipherSeedMnemonic: [],
    aezeedPassphrase: new Uint8Array(),
    recoveryWindow: 0,
    channelBackups: undefined,
    statelessInit: false,
    extendedMasterKey: "",
    extendedMasterKeyBirthdayTimestamp: "0",
    watchOnly: undefined,
  };
}

export const InitWalletRequest = {
  encode(message: InitWalletRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.walletPassword.length !== 0) {
      writer.uint32(10).bytes(message.walletPassword);
    }
    for (const v of message.cipherSeedMnemonic) {
      writer.uint32(18).string(v!);
    }
    if (message.aezeedPassphrase.length !== 0) {
      writer.uint32(26).bytes(message.aezeedPassphrase);
    }
    if (message.recoveryWindow !== 0) {
      writer.uint32(32).int32(message.recoveryWindow);
    }
    if (message.channelBackups !== undefined) {
      ChanBackupSnapshot.encode(message.channelBackups, writer.uint32(42).fork()).ldelim();
    }
    if (message.statelessInit === true) {
      writer.uint32(48).bool(message.statelessInit);
    }
    if (message.extendedMasterKey !== "") {
      writer.uint32(58).string(message.extendedMasterKey);
    }
    if (message.extendedMasterKeyBirthdayTimestamp !== "0") {
      writer.uint32(64).uint64(message.extendedMasterKeyBirthdayTimestamp);
    }
    if (message.watchOnly !== undefined) {
      WatchOnly.encode(message.watchOnly, writer.uint32(74).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): InitWalletRequest {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInitWalletRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.walletPassword = reader.bytes();
          break;
        case 2:
          message.cipherSeedMnemonic.push(reader.string());
          break;
        case 3:
          message.aezeedPassphrase = reader.bytes();
          break;
        case 4:
          message.recoveryWindow = reader.int32();
          break;
        case 5:
          message.channelBackups = ChanBackupSnapshot.decode(reader, reader.uint32());
          break;
        case 6:
          message.statelessInit = reader.bool();
          break;
        case 7:
          message.extendedMasterKey = reader.string();
          break;
        case 8:
          message.extendedMasterKeyBirthdayTimestamp = longToString(reader.uint64() as Long);
          break;
        case 9:
          message.watchOnly = WatchOnly.decode(reader, reader.uint32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): InitWalletRequest {
    return {
      walletPassword: isSet(object.walletPassword) ? bytesFromBase64(object.walletPassword) : new Uint8Array(),
      cipherSeedMnemonic: Array.isArray(object?.cipherSeedMnemonic)
        ? object.cipherSeedMnemonic.map((e: any) => String(e))
        : [],
      aezeedPassphrase: isSet(object.aezeedPassphrase) ? bytesFromBase64(object.aezeedPassphrase) : new Uint8Array(),
      recoveryWindow: isSet(object.recoveryWindow) ? Number(object.recoveryWindow) : 0,
      channelBackups: isSet(object.channelBackups) ? ChanBackupSnapshot.fromJSON(object.channelBackups) : undefined,
      statelessInit: isSet(object.statelessInit) ? Boolean(object.statelessInit) : false,
      extendedMasterKey: isSet(object.extendedMasterKey) ? String(object.extendedMasterKey) : "",
      extendedMasterKeyBirthdayTimestamp: isSet(object.extendedMasterKeyBirthdayTimestamp)
        ? String(object.extendedMasterKeyBirthdayTimestamp)
        : "0",
      watchOnly: isSet(object.watchOnly) ? WatchOnly.fromJSON(object.watchOnly) : undefined,
    };
  },

  toJSON(message: InitWalletRequest): unknown {
    const obj: any = {};
    message.walletPassword !== undefined &&
      (obj.walletPassword = base64FromBytes(
        message.walletPassword !== undefined ? message.walletPassword : new Uint8Array(),
      ));
    if (message.cipherSeedMnemonic) {
      obj.cipherSeedMnemonic = message.cipherSeedMnemonic.map((e) => e);
    } else {
      obj.cipherSeedMnemonic = [];
    }
    message.aezeedPassphrase !== undefined &&
      (obj.aezeedPassphrase = base64FromBytes(
        message.aezeedPassphrase !== undefined ? message.aezeedPassphrase : new Uint8Array(),
      ));
    message.recoveryWindow !== undefined && (obj.recoveryWindow = Math.round(message.recoveryWindow));
    message.channelBackups !== undefined &&
      (obj.channelBackups = message.channelBackups ? ChanBackupSnapshot.toJSON(message.channelBackups) : undefined);
    message.statelessInit !== undefined && (obj.statelessInit = message.statelessInit);
    message.extendedMasterKey !== undefined && (obj.extendedMasterKey = message.extendedMasterKey);
    message.extendedMasterKeyBirthdayTimestamp !== undefined &&
      (obj.extendedMasterKeyBirthdayTimestamp = message.extendedMasterKeyBirthdayTimestamp);
    message.watchOnly !== undefined &&
      (obj.watchOnly = message.watchOnly ? WatchOnly.toJSON(message.watchOnly) : undefined);
    return obj;
  },

  fromPartial(object: DeepPartial<InitWalletRequest>): InitWalletRequest {
    const message = createBaseInitWalletRequest();
    message.walletPassword = object.walletPassword ?? new Uint8Array();
    message.cipherSeedMnemonic = object.cipherSeedMnemonic?.map((e) => e) || [];
    message.aezeedPassphrase = object.aezeedPassphrase ?? new Uint8Array();
    message.recoveryWindow = object.recoveryWindow ?? 0;
    message.channelBackups = (object.channelBackups !== undefined && object.channelBackups !== null)
      ? ChanBackupSnapshot.fromPartial(object.channelBackups)
      : undefined;
    message.statelessInit = object.statelessInit ?? false;
    message.extendedMasterKey = object.extendedMasterKey ?? "";
    message.extendedMasterKeyBirthdayTimestamp = object.extendedMasterKeyBirthdayTimestamp ?? "0";
    message.watchOnly = (object.watchOnly !== undefined && object.watchOnly !== null)
      ? WatchOnly.fromPartial(object.watchOnly)
      : undefined;
    return message;
  },
};

function createBaseInitWalletResponse(): InitWalletResponse {
  return { adminMacaroon: new Uint8Array() };
}

export const InitWalletResponse = {
  encode(message: InitWalletResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.adminMacaroon.length !== 0) {
      writer.uint32(10).bytes(message.adminMacaroon);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): InitWalletResponse {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInitWalletResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.adminMacaroon = reader.bytes();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): InitWalletResponse {
    return { adminMacaroon: isSet(object.adminMacaroon) ? bytesFromBase64(object.adminMacaroon) : new Uint8Array() };
  },

  toJSON(message: InitWalletResponse): unknown {
    const obj: any = {};
    message.adminMacaroon !== undefined &&
      (obj.adminMacaroon = base64FromBytes(
        message.adminMacaroon !== undefined ? message.adminMacaroon : new Uint8Array(),
      ));
    return obj;
  },

  fromPartial(object: DeepPartial<InitWalletResponse>): InitWalletResponse {
    const message = createBaseInitWalletResponse();
    message.adminMacaroon = object.adminMacaroon ?? new Uint8Array();
    return message;
  },
};

function createBaseWatchOnly(): WatchOnly {
  return { masterKeyBirthdayTimestamp: "0", masterKeyFingerprint: new Uint8Array(), accounts: [] };
}

export const WatchOnly = {
  encode(message: WatchOnly, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.masterKeyBirthdayTimestamp !== "0") {
      writer.uint32(8).uint64(message.masterKeyBirthdayTimestamp);
    }
    if (message.masterKeyFingerprint.length !== 0) {
      writer.uint32(18).bytes(message.masterKeyFingerprint);
    }
    for (const v of message.accounts) {
      WatchOnlyAccount.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): WatchOnly {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWatchOnly();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.masterKeyBirthdayTimestamp = longToString(reader.uint64() as Long);
          break;
        case 2:
          message.masterKeyFingerprint = reader.bytes();
          break;
        case 3:
          message.accounts.push(WatchOnlyAccount.decode(reader, reader.uint32()));
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): WatchOnly {
    return {
      masterKeyBirthdayTimestamp: isSet(object.masterKeyBirthdayTimestamp)
        ? String(object.masterKeyBirthdayTimestamp)
        : "0",
      masterKeyFingerprint: isSet(object.masterKeyFingerprint)
        ? bytesFromBase64(object.masterKeyFingerprint)
        : new Uint8Array(),
      accounts: Array.isArray(object?.accounts) ? object.accounts.map((e: any) => WatchOnlyAccount.fromJSON(e)) : [],
    };
  },

  toJSON(message: WatchOnly): unknown {
    const obj: any = {};
    message.masterKeyBirthdayTimestamp !== undefined &&
      (obj.masterKeyBirthdayTimestamp = message.masterKeyBirthdayTimestamp);
    message.masterKeyFingerprint !== undefined &&
      (obj.masterKeyFingerprint = base64FromBytes(
        message.masterKeyFingerprint !== undefined ? message.masterKeyFingerprint : new Uint8Array(),
      ));
    if (message.accounts) {
      obj.accounts = message.accounts.map((e) => e ? WatchOnlyAccount.toJSON(e) : undefined);
    } else {
      obj.accounts = [];
    }
    return obj;
  },

  fromPartial(object: DeepPartial<WatchOnly>): WatchOnly {
    const message = createBaseWatchOnly();
    message.masterKeyBirthdayTimestamp = object.masterKeyBirthdayTimestamp ?? "0";
    message.masterKeyFingerprint = object.masterKeyFingerprint ?? new Uint8Array();
    message.accounts = object.accounts?.map((e) => WatchOnlyAccount.fromPartial(e)) || [];
    return message;
  },
};

function createBaseWatchOnlyAccount(): WatchOnlyAccount {
  return { purpose: 0, coinType: 0, account: 0, xpub: "" };
}

export const WatchOnlyAccount = {
  encode(message: WatchOnlyAccount, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.purpose !== 0) {
      writer.uint32(8).uint32(message.purpose);
    }
    if (message.coinType !== 0) {
      writer.uint32(16).uint32(message.coinType);
    }
    if (message.account !== 0) {
      writer.uint32(24).uint32(message.account);
    }
    if (message.xpub !== "") {
      writer.uint32(34).string(message.xpub);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): WatchOnlyAccount {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWatchOnlyAccount();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.purpose = reader.uint32();
          break;
        case 2:
          message.coinType = reader.uint32();
          break;
        case 3:
          message.account = reader.uint32();
          break;
        case 4:
          message.xpub = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): WatchOnlyAccount {
    return {
      purpose: isSet(object.purpose) ? Number(object.purpose) : 0,
      coinType: isSet(object.coinType) ? Number(object.coinType) : 0,
      account: isSet(object.account) ? Number(object.account) : 0,
      xpub: isSet(object.xpub) ? String(object.xpub) : "",
    };
  },

  toJSON(message: WatchOnlyAccount): unknown {
    const obj: any = {};
    message.purpose !== undefined && (obj.purpose = Math.round(message.purpose));
    message.coinType !== undefined && (obj.coinType = Math.round(message.coinType));
    message.account !== undefined && (obj.account = Math.round(message.account));
    message.xpub !== undefined && (obj.xpub = message.xpub);
    return obj;
  },

  fromPartial(object: DeepPartial<WatchOnlyAccount>): WatchOnlyAccount {
    const message = createBaseWatchOnlyAccount();
    message.purpose = object.purpose ?? 0;
    message.coinType = object.coinType ?? 0;
    message.account = object.account ?? 0;
    message.xpub = object.xpub ?? "";
    return message;
  },
};

function createBaseUnlockWalletRequest(): UnlockWalletRequest {
  return { walletPassword: new Uint8Array(), recoveryWindow: 0, channelBackups: undefined, statelessInit: false };
}

export const UnlockWalletRequest = {
  encode(message: UnlockWalletRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.walletPassword.length !== 0) {
      writer.uint32(10).bytes(message.walletPassword);
    }
    if (message.recoveryWindow !== 0) {
      writer.uint32(16).int32(message.recoveryWindow);
    }
    if (message.channelBackups !== undefined) {
      ChanBackupSnapshot.encode(message.channelBackups, writer.uint32(26).fork()).ldelim();
    }
    if (message.statelessInit === true) {
      writer.uint32(32).bool(message.statelessInit);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UnlockWalletRequest {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUnlockWalletRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.walletPassword = reader.bytes();
          break;
        case 2:
          message.recoveryWindow = reader.int32();
          break;
        case 3:
          message.channelBackups = ChanBackupSnapshot.decode(reader, reader.uint32());
          break;
        case 4:
          message.statelessInit = reader.bool();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): UnlockWalletRequest {
    return {
      walletPassword: isSet(object.walletPassword) ? bytesFromBase64(object.walletPassword) : new Uint8Array(),
      recoveryWindow: isSet(object.recoveryWindow) ? Number(object.recoveryWindow) : 0,
      channelBackups: isSet(object.channelBackups) ? ChanBackupSnapshot.fromJSON(object.channelBackups) : undefined,
      statelessInit: isSet(object.statelessInit) ? Boolean(object.statelessInit) : false,
    };
  },

  toJSON(message: UnlockWalletRequest): unknown {
    const obj: any = {};
    message.walletPassword !== undefined &&
      (obj.walletPassword = base64FromBytes(
        message.walletPassword !== undefined ? message.walletPassword : new Uint8Array(),
      ));
    message.recoveryWindow !== undefined && (obj.recoveryWindow = Math.round(message.recoveryWindow));
    message.channelBackups !== undefined &&
      (obj.channelBackups = message.channelBackups ? ChanBackupSnapshot.toJSON(message.channelBackups) : undefined);
    message.statelessInit !== undefined && (obj.statelessInit = message.statelessInit);
    return obj;
  },

  fromPartial(object: DeepPartial<UnlockWalletRequest>): UnlockWalletRequest {
    const message = createBaseUnlockWalletRequest();
    message.walletPassword = object.walletPassword ?? new Uint8Array();
    message.recoveryWindow = object.recoveryWindow ?? 0;
    message.channelBackups = (object.channelBackups !== undefined && object.channelBackups !== null)
      ? ChanBackupSnapshot.fromPartial(object.channelBackups)
      : undefined;
    message.statelessInit = object.statelessInit ?? false;
    return message;
  },
};

function createBaseUnlockWalletResponse(): UnlockWalletResponse {
  return {};
}

export const UnlockWalletResponse = {
  encode(_: UnlockWalletResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UnlockWalletResponse {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUnlockWalletResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(_: any): UnlockWalletResponse {
    return {};
  },

  toJSON(_: UnlockWalletResponse): unknown {
    const obj: any = {};
    return obj;
  },

  fromPartial(_: DeepPartial<UnlockWalletResponse>): UnlockWalletResponse {
    const message = createBaseUnlockWalletResponse();
    return message;
  },
};

function createBaseChangePasswordRequest(): ChangePasswordRequest {
  return {
    currentPassword: new Uint8Array(),
    newPassword: new Uint8Array(),
    statelessInit: false,
    newMacaroonRootKey: false,
  };
}

export const ChangePasswordRequest = {
  encode(message: ChangePasswordRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.currentPassword.length !== 0) {
      writer.uint32(10).bytes(message.currentPassword);
    }
    if (message.newPassword.length !== 0) {
      writer.uint32(18).bytes(message.newPassword);
    }
    if (message.statelessInit === true) {
      writer.uint32(24).bool(message.statelessInit);
    }
    if (message.newMacaroonRootKey === true) {
      writer.uint32(32).bool(message.newMacaroonRootKey);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ChangePasswordRequest {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChangePasswordRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.currentPassword = reader.bytes();
          break;
        case 2:
          message.newPassword = reader.bytes();
          break;
        case 3:
          message.statelessInit = reader.bool();
          break;
        case 4:
          message.newMacaroonRootKey = reader.bool();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): ChangePasswordRequest {
    return {
      currentPassword: isSet(object.currentPassword) ? bytesFromBase64(object.currentPassword) : new Uint8Array(),
      newPassword: isSet(object.newPassword) ? bytesFromBase64(object.newPassword) : new Uint8Array(),
      statelessInit: isSet(object.statelessInit) ? Boolean(object.statelessInit) : false,
      newMacaroonRootKey: isSet(object.newMacaroonRootKey) ? Boolean(object.newMacaroonRootKey) : false,
    };
  },

  toJSON(message: ChangePasswordRequest): unknown {
    const obj: any = {};
    message.currentPassword !== undefined &&
      (obj.currentPassword = base64FromBytes(
        message.currentPassword !== undefined ? message.currentPassword : new Uint8Array(),
      ));
    message.newPassword !== undefined &&
      (obj.newPassword = base64FromBytes(message.newPassword !== undefined ? message.newPassword : new Uint8Array()));
    message.statelessInit !== undefined && (obj.statelessInit = message.statelessInit);
    message.newMacaroonRootKey !== undefined && (obj.newMacaroonRootKey = message.newMacaroonRootKey);
    return obj;
  },

  fromPartial(object: DeepPartial<ChangePasswordRequest>): ChangePasswordRequest {
    const message = createBaseChangePasswordRequest();
    message.currentPassword = object.currentPassword ?? new Uint8Array();
    message.newPassword = object.newPassword ?? new Uint8Array();
    message.statelessInit = object.statelessInit ?? false;
    message.newMacaroonRootKey = object.newMacaroonRootKey ?? false;
    return message;
  },
};

function createBaseChangePasswordResponse(): ChangePasswordResponse {
  return { adminMacaroon: new Uint8Array() };
}

export const ChangePasswordResponse = {
  encode(message: ChangePasswordResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.adminMacaroon.length !== 0) {
      writer.uint32(10).bytes(message.adminMacaroon);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ChangePasswordResponse {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChangePasswordResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.adminMacaroon = reader.bytes();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): ChangePasswordResponse {
    return { adminMacaroon: isSet(object.adminMacaroon) ? bytesFromBase64(object.adminMacaroon) : new Uint8Array() };
  },

  toJSON(message: ChangePasswordResponse): unknown {
    const obj: any = {};
    message.adminMacaroon !== undefined &&
      (obj.adminMacaroon = base64FromBytes(
        message.adminMacaroon !== undefined ? message.adminMacaroon : new Uint8Array(),
      ));
    return obj;
  },

  fromPartial(object: DeepPartial<ChangePasswordResponse>): ChangePasswordResponse {
    const message = createBaseChangePasswordResponse();
    message.adminMacaroon = object.adminMacaroon ?? new Uint8Array();
    return message;
  },
};

/**
 * WalletUnlocker is a service that is used to set up a wallet password for
 * lnd at first startup, and unlock a previously set up wallet.
 */
export type WalletUnlockerDefinition = typeof WalletUnlockerDefinition;
export const WalletUnlockerDefinition = {
  name: "WalletUnlocker",
  fullName: "lnrpc.WalletUnlocker",
  methods: {
    /**
     * GenSeed is the first method that should be used to instantiate a new lnd
     * instance. This method allows a caller to generate a new aezeed cipher seed
     * given an optional passphrase. If provided, the passphrase will be necessary
     * to decrypt the cipherseed to expose the internal wallet seed.
     *
     * Once the cipherseed is obtained and verified by the user, the InitWallet
     * method should be used to commit the newly generated seed, and create the
     * wallet.
     */
    genSeed: {
      name: "GenSeed",
      requestType: GenSeedRequest,
      requestStream: false,
      responseType: GenSeedResponse,
      responseStream: false,
      options: {},
    },
    /**
     * InitWallet is used when lnd is starting up for the first time to fully
     * initialize the daemon and its internal wallet. At the very least a wallet
     * password must be provided. This will be used to encrypt sensitive material
     * on disk.
     *
     * In the case of a recovery scenario, the user can also specify their aezeed
     * mnemonic and passphrase. If set, then the daemon will use this prior state
     * to initialize its internal wallet.
     *
     * Alternatively, this can be used along with the GenSeed RPC to obtain a
     * seed, then present it to the user. Once it has been verified by the user,
     * the seed can be fed into this RPC in order to commit the new wallet.
     */
    initWallet: {
      name: "InitWallet",
      requestType: InitWalletRequest,
      requestStream: false,
      responseType: InitWalletResponse,
      responseStream: false,
      options: {},
    },
    /**
     * lncli: `unlock`
     * UnlockWallet is used at startup of lnd to provide a password to unlock
     * the wallet database.
     */
    unlockWallet: {
      name: "UnlockWallet",
      requestType: UnlockWalletRequest,
      requestStream: false,
      responseType: UnlockWalletResponse,
      responseStream: false,
      options: {},
    },
    /**
     * lncli: `changepassword`
     * ChangePassword changes the password of the encrypted wallet. This will
     * automatically unlock the wallet database if successful.
     */
    changePassword: {
      name: "ChangePassword",
      requestType: ChangePasswordRequest,
      requestStream: false,
      responseType: ChangePasswordResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

declare var self: any | undefined;
declare var window: any | undefined;
declare var global: any | undefined;
var globalThis: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

function bytesFromBase64(b64: string): Uint8Array {
  if (globalThis.Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if (globalThis.Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToString(long: Long) {
  return long.toString();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
